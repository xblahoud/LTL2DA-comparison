# -*- coding: utf-8 -*-
'''Runs a parametric benchmark specified as a first argument.
run with
$ ipython3 run_param.ipy -- bench_names [fragment] [data_dir]
where bench_names is a comma separated list of benchmarks
'''
from ltlcross_runner import LtlcrossRunner, param_runner
from tools_hier import get_tools
from datetime import datetime
import os
import sys

def run_parametric(self,pattern,timeout='300',log=sys.stdout,verbose=True):
    i = 1
    if verbose:
        print('{}: Working on {}'.format(datetime.now().strftime('[%d.%m.%Y %T]'),str(i)),file=log)
        print('\t{} tools:'.format(len(self.tools)),file=log)
        print(self.tools.keys(),file=log,flush=True)
    args = self.create_args(log_file=self.log_file, res_file=self.res_file,save_bogus=False,tool_subset=self.tools,forms=False,escape_tools=True,automata=False,timeout=timeout)
    cmd = self.ltlcross_cmd(args)
    !genltl {pattern}={i} | {cmd} 2>{self.log_file}
    
    # Get succesfull tools
    self.parse_results()
    s = self.values.states.iloc[len(self.values.states)-1]
    next_tools = list(s.dropna().index)
    
    while next_tools:
        i = i + 1
        if verbose:
            print('{}: Working on {}'.format(datetime.now().strftime('[%d.%m.%Y %T]'),str(i)),file=log)
            print('\t{} tools:'.format(len(next_tools)),file=log)
            print(next_tools,file=log,flush=True)
        args = self.create_args(log_file='>>'+self.log_file, res_file='">>'+self.res_file+'"',save_bogus=False,tool_subset=next_tools,forms=False,escape_tools=True,automata=False,timeout=timeout)
        cmd = self.ltlcross_cmd(args)
        !genltl {pattern}={i} | {cmd} 2>>{self.log_file}
        
        # Get succesfull tools
        self.parse_results()
        s = self.values.states.iloc[len(self.values.states)-1]
        next_tools = list(s.dropna().index)

if len(sys.argv) == 1:
    print("You need to specify a pattern.")
    print("Usage: ipython3 run_param.ipy -- 'bench_name1,bench_name2,...' ['fragment'] ['data_dir']")
    os._exit(1)

fragment = 'full'
if len(sys.argv) > 2:
    fragment = sys.argv[2]

tools = get_tools(fragment)

gh = ['gh-e','gh-c1','gh-c2','gh-q']
gh2 = ['gh-r','gh-s','gh-u','gh-u2']
ms = ['ms-phi-h','ms-phi-r','ms-phi-s']
other = ['and-fg','or-fg','go-theta']
dexp = ['kr-n','kr-nlogn']
patts = gh + gh2 + ms + other + dexp

patterns = sys.argv[1].split(',')

if patterns == ['all']:
    patterns = patts
else:
    for p in patterns:
        if p not in patts + ['all']:
            print('Unknown pattern {}. Exiting.'.format(p))
            exit(1)

data_dir = 'data_param_new'
if len(sys.argv) > 3:
    data_dir = sys.argv[3]

!mkdir -p {data_dir}
  
log_f = '{}/{}.{}.log'.format(data_dir,os.uname()[1],os.getpid())
with open(log_f,'w') as log:
    for p in patterns:
        r = param_runner(p,tools,data_dir)
        print('=========================',file=log)
        print(p,file=log,flush=True)
        if os.path.exists(r.res_file):
            print('Already done',file=log)
        else:
            run_parametric(r,'--'+p,log=log)